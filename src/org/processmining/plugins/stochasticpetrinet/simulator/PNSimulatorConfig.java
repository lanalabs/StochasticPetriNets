package org.processmining.plugins.stochasticpetrinet.simulator;

/**
 * Configuration parameters for the simple simulation of Petri Nets.
 * Used by {@link PNSimulator}.
 * 
 * @author Andreas Rogge-Solti
 *
 */
public class PNSimulatorConfig {
	
	/** The number of traces to simulate */
	int numberOfTraces;
	
	/** The arrival rate (new traces will be created with a Poisson distribution with this arrival rate) */
	double arrivalRate;
	
	/** The random seed to make results reproducible */
	long seed;
	
	/** In case of loopy models, this is useful to prevent unfinite simulation. 
	 * We simply stop simulation for one trace, when this number of events is reached. */
	int maxEventsInOneTrace;
	
	/** 
	 * The name of the log to be generated.
	 */
	String logName;
	
	/**
	 * Conversion factor to milliseconds in the log
	 * E.g., if the model times are specified in <b>minutes</b>, the sampled values (e.g., 5) 
	 * must be multiplied by this factor (e.g., 60*1000) 
	 */
	double unitFactor;
	
	/**
	 * Counter variable to provide a basic form of unique labeling of logs
	 * generated by the of consequent use of the simulator.
	 */
	private static int counter = 1;
	
	
	
	public PNSimulatorConfig(){
		this(1000);
	}
	public PNSimulatorConfig(int numberOfTraces){
		this(numberOfTraces,1000);
	}
	public PNSimulatorConfig(int numberOfTraces, double unitFactor){
		this(numberOfTraces,unitFactor,1);
	}
	public PNSimulatorConfig(int numberOfTraces, double unitFactor, long seed){
		this(numberOfTraces,1,seed,unitFactor,1000,"Log"+counter++);
	}
	
	public PNSimulatorConfig(int numberOfTraces, double arrivalRate, long seed, double unitFactor, int maxEventsInOneTrace, String logName){
		this.numberOfTraces = numberOfTraces;
		this.arrivalRate = arrivalRate;
		this.unitFactor = unitFactor; // default to seconds (= 1000 ms)
		this.maxEventsInOneTrace = maxEventsInOneTrace;
		this.logName = logName;
	}
	
	
}
