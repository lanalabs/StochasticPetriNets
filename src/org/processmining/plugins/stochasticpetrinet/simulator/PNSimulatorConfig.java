package org.processmining.plugins.stochasticpetrinet.simulator;

import org.processmining.models.graphbased.directed.petrinet.StochasticNet.ExecutionPolicy;

/**
 * Configuration parameters for the simple simulation of (stochastic) Petri Nets.
 * Used by {@link PNSimulator}.
 * 
 * @author Andreas Rogge-Solti
 *
 */
public class PNSimulatorConfig {
	
	/** The number of traces to simulate */
	int numberOfTraces;
	
	/** The arrival rate (new traces will be created with a Poisson distribution with this arrival rate) */
	double arrivalRate;
	
	/** The random seed to make results reproducible */
	long seed;
	
	/** In case of loopy models, this is useful to prevent unfinite simulation. 
	 * We simply stop simulation for one trace, when this number of events is reached. */
	int maxEventsInOneTrace;
	
	/** 
	 * The name of the log to be generated.
	 */
	String logName;
	
	/**
	 * Conversion factor to milliseconds in the log
	 * E.g., if the model times are specified in <b>minutes</b>, the sampled values (e.g., 5) 
	 * must be multiplied by this factor (e.g., 60*1000) 
	 */
	double unitFactor;
	
	/**
	 * If the stochastic Petri net is not restricted to memoryless transitions, i.e., negative exponential ones, 
	 * the firing selection policy and the memory policy needs to be selected. This is called the execution policy.
	 */
	ExecutionPolicy executionPolicy;
	
	/**
	 * Counter variable to provide a basic form of unique labeling of logs
	 * generated by the of consequent use of the simulator.
	 */
	private static int counter = 1;
	
	
	
	public PNSimulatorConfig(){
		this(1000);
	}
	public PNSimulatorConfig(int numberOfTraces){
		this(numberOfTraces,1000);
	}
	public PNSimulatorConfig(int numberOfTraces, double unitFactor){
		this(numberOfTraces,unitFactor,1);
	}
	public PNSimulatorConfig(int numberOfTraces, double unitFactor, long seed){
		this(numberOfTraces,unitFactor, seed, 1);
	}
	public PNSimulatorConfig(int numberOfTraces, double unitFactor, long seed, double arrivalRate){
		this(numberOfTraces,unitFactor, seed, arrivalRate, 10000);
	}
	public PNSimulatorConfig(int numberOfTraces, double unitFactor, long seed, double arrivalRate, int maxEventsInOneTrace){
		this(numberOfTraces,unitFactor, seed, arrivalRate, maxEventsInOneTrace, ExecutionPolicy.RACE_ENABLING_MEMORY);
	}
	public PNSimulatorConfig(int numberOfTraces, double unitFactor, long seed, double arrivalRate, int maxEventsInOneTrace, ExecutionPolicy policy){
		this(numberOfTraces,unitFactor, seed, arrivalRate, maxEventsInOneTrace, policy, "Log"+counter++);
	}
	/**
	 * 
	 * @param numberOfTraces the number of traces to generate by simulation.
	 * @param unitFactor the time units factor represented in the stochastic distributions (1 = milliseconds, 1000 = seconds, 60.000=minutes...)
	 * @param seed the seed for the pseudo-random generator (helps to generate the same results, if required)
	 * @param arrivalRate the arrival rate lamda for the poisson distribution used to simulate the arriving process of new cases 
	 * @param maxEventsInOneTrace in order to avoid running into infinite loops, there is this variable that sets an upper limit.
	 * @param policy the {@link ExecutionPolicy} of the network, i.e., how to select the next transition (preselection/race), and how to deal with transitions that lose a race. 
	 * @param logName the name of the generated log.
	 */
	public PNSimulatorConfig(int numberOfTraces, double unitFactor, long seed, double arrivalRate, int maxEventsInOneTrace, ExecutionPolicy policy, String logName){
		this.numberOfTraces = numberOfTraces;
		this.arrivalRate = arrivalRate;
		this.unitFactor = unitFactor; // default to seconds (= 1000 ms)
		this.maxEventsInOneTrace = maxEventsInOneTrace;
		this.logName = logName;
		this.executionPolicy = policy;
	}	
}
